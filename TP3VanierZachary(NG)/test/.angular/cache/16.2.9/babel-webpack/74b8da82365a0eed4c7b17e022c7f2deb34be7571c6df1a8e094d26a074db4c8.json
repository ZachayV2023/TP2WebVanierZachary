{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, Subject } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VoyageService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7011/api/Voyages';\n    this.voyageUpdated = new Subject(); // Subject to broadcast updates\n    this.voyages = []; // Store the voyages\n  }\n\n  createVoyage(voyageData) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.post(this.apiUrl, voyageData, {\n      headers\n    }).pipe(catchError(this.handleError), tap(newVoyage => {\n      this.voyages.push(newVoyage); // Add the new voyage to the local array\n      this.voyageUpdated.next([...this.voyages]); // Broadcast the update\n    }));\n  }\n\n  getVoyageUpdateListener() {\n    return this.voyageUpdated.asObservable();\n  }\n  // Error handling method\n  handleError(error) {\n    if (error.status === 401) {\n      // If the error is a 401 Unauthorized, handle it here\n      console.error('Unauthorized request. Token may be invalid or expired.', error.error);\n    } else {\n      // Handle other types of errors\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message\n    return throwError('Something bad happened; please try again later.');\n  }\n  static #_ = this.ɵfac = function VoyageService_Factory(t) {\n    return new (t || VoyageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VoyageService,\n    factory: VoyageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","throwError","Subject","catchError","VoyageService","constructor","http","apiUrl","voyageUpdated","voyages","createVoyage","voyageData","token","localStorage","getItem","headers","post","pipe","handleError","tap","newVoyage","push","next","getVoyageUpdateListener","asObservable","error","status","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Zachary\\Desktop\\TP3WebVanierZachary\\TP3VanierZachary(NG)\\test\\src\\app\\voyage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, Subject } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VoyageService {\n  private apiUrl = 'https://localhost:7011/api/Voyages';\n  private voyageUpdated = new Subject<any[]>(); // Subject to broadcast updates\n  private voyages: any[] = []; // Store the voyages\n\n  constructor(private http: HttpClient) { }\n\n  createVoyage(voyageData: FormData): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.post(this.apiUrl, voyageData, { headers }).pipe(\n      catchError(this.handleError),\n      tap((newVoyage) => {\n        this.voyages.push(newVoyage); // Add the new voyage to the local array\n        this.voyageUpdated.next([...this.voyages]); // Broadcast the update\n      })\n    );\n  }\n\n  getVoyageUpdateListener(): Observable<any[]> {\n    return this.voyageUpdated.asObservable();\n  }\n\n  // Error handling method\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 401) {\n      // If the error is a 401 Unauthorized, handle it here\n      console.error('Unauthorized request. Token may be invalid or expired.', error.error);\n    } else {\n      // Handle other types of errors\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message\n    return throwError('Something bad happened; please try again later.');\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAA2B,sBAAsB;AACjF,SAAqBC,UAAU,EAAEC,OAAO,QAAQ,MAAM;AACtD,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,aAAa;EAKxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,oCAAoC;IAC7C,KAAAC,aAAa,GAAG,IAAIN,OAAO,EAAS,CAAC,CAAC;IACtC,KAAAO,OAAO,GAAU,EAAE,CAAC,CAAC;EAEW;;EAExCC,YAAYA,CAACC,UAAoB;IAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIf,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAUY,KAAK;KACjC,CAAC;IAEF,OAAO,IAAI,CAACN,IAAI,CAACU,IAAI,CAAC,IAAI,CAACT,MAAM,EAAEI,UAAU,EAAE;MAAEI;IAAO,CAAE,CAAC,CAACE,IAAI,CAC9Dd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,EAC5BC,GAAG,CAAEC,SAAS,IAAI;MAChB,IAAI,CAACX,OAAO,CAACY,IAAI,CAACD,SAAS,CAAC,CAAC,CAAC;MAC9B,IAAI,CAACZ,aAAa,CAACc,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CACH;EACH;;EAEAc,uBAAuBA,CAAA;IACrB,OAAO,IAAI,CAACf,aAAa,CAACgB,YAAY,EAAE;EAC1C;EAEA;EACQN,WAAWA,CAACO,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;MACxB;MACAC,OAAO,CAACF,KAAK,CAAC,wDAAwD,EAAEA,KAAK,CAACA,KAAK,CAAC;KACrF,MAAM;MACL;MACAE,OAAO,CAACF,KAAK,CAAC,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAEjF;IACA,OAAOxB,UAAU,CAAC,iDAAiD,CAAC;EACtE;EAAC,QAAA2B,CAAA,G;qBArCUxB,aAAa,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAb7B,aAAa;IAAA8B,OAAA,EAAb9B,aAAa,CAAA+B,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
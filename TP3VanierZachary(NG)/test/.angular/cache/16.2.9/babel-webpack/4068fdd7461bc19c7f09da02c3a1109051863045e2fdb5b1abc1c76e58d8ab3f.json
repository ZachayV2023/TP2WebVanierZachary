{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const isLoggedIn = this.authService.isLoggedIn(); // Implement this method to check login status\n    if (isLoggedIn) {\n      // If trying to access login or register while logged in, redirect to dashboard\n      if (['/login', '/register'].includes(state.url)) {\n        this.router.navigate(['/dashboard']); // Redirect to the dashboard route\n        return false;\n      }\n      return true;\n    } else {\n      // If not logged in and trying to access a restricted route, redirect to login\n      if (state.url !== '/login' && state.url !== '/register') {\n        this.router.navigate(['/login']);\n        return false;\n      }\n      return true;\n    }\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","isLoggedIn","includes","url","navigate","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Zachary\\Desktop\\TP3WebVanierZachary\\TP3VanierZachary(NG)\\test\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service'; // Your authentication service\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const isLoggedIn = this.authService.isLoggedIn(); // Implement this method to check login status\n    if (isLoggedIn) {\n      // If trying to access login or register while logged in, redirect to dashboard\n      if (['/login', '/register'].includes(state.url)) {\n        this.router.navigate(['/dashboard']); // Redirect to the dashboard route\n        return false;\n      }\n      return true;\n    } else {\n      // If not logged in and trying to access a restricted route, redirect to login\n      if (state.url !== '/login' && state.url !== '/register') {\n        this.router.navigate(['/login']);\n        return false;\n      }\n      return true;\n    }\n  }\n}\n"],"mappings":";;;AAKA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,UAAU,GAAG,IAAI,CAACL,WAAW,CAACK,UAAU,EAAE,CAAC,CAAC;IAClD,IAAIA,UAAU,EAAE;MACd;MACA,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAACC,QAAQ,CAACF,KAAK,CAACG,GAAG,CAAC,EAAE;QAC/C,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,KAAK;;MAEd,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAIJ,KAAK,CAACG,GAAG,KAAK,QAAQ,IAAIH,KAAK,CAACG,GAAG,KAAK,WAAW,EAAE;QACvD,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;;MAEd,OAAO,IAAI;;EAEf;EAAC,QAAAC,CAAA,G;qBApBUX,SAAS,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATlB,SAAS;IAAAmB,OAAA,EAATnB,SAAS,CAAAoB,IAAA;IAAAC,UAAA,EADI;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
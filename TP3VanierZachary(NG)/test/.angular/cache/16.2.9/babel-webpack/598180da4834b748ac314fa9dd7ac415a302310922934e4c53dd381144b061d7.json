{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, Subject, tap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VoyageService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7011/api/Voyages';\n    this.voyageUpdated = new Subject(); // Subject to broadcast updates\n    this.voyages = []; // Store the voyages\n  }\n  // Method to fetch existing voyages from the database\n  getAllVoyages() {\n    return this.http.get(this.apiUrl).pipe(tap(voyages => {\n      this.voyages = voyages;\n      this.voyageUpdated.next([...this.voyages]);\n    }), catchError(this.handleError));\n  }\n  createVoyage(voyageData) {\n    const token = localStorage.getItem('token');\n    console.log('Token used for request:', token); // Log token\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.post(this.apiUrl, voyageData, {\n      headers\n    }).pipe(catchError(this.handleError), tap(newVoyage => {\n      this.voyages.push(newVoyage);\n      this.voyageUpdated.next([...this.voyages]);\n    }));\n  }\n  deleteVoyage(voyageId) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.delete(`${this.apiUrl}/${voyageId}`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getVoyageUpdateListener() {\n    return this.voyageUpdated.asObservable();\n  }\n  // Error handling method\n  handleError(error) {\n    console.error('Error occurred in VoyageService:', error); // Detailed error log\n    return throwError('Error in VoyageService');\n  }\n  shareVoyage(voyageId, userEmail) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n    // The body of the request could include the ID of the voyage and the email to share with\n    const body = {\n      voyageId,\n      userEmail\n    };\n    // This assumes you have a backend endpoint at /api/voyages/share to handle sharing\n    return this.http.post(`${this.apiUrl}/share`, body, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function VoyageService_Factory(t) {\n    return new (t || VoyageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VoyageService,\n    factory: VoyageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","throwError","Subject","tap","catchError","VoyageService","constructor","http","apiUrl","voyageUpdated","voyages","getAllVoyages","get","pipe","next","handleError","createVoyage","voyageData","token","localStorage","getItem","console","log","headers","post","newVoyage","push","deleteVoyage","voyageId","delete","getVoyageUpdateListener","asObservable","error","shareVoyage","userEmail","body","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Zachary\\Desktop\\TP3WebVanierZachary\\TP3VanierZachary(NG)\\test\\src\\app\\voyage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, Subject, tap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VoyageService {\n  private apiUrl = 'https://localhost:7011/api/Voyages';\n  private voyageUpdated = new Subject<any[]>(); // Subject to broadcast updates\n  private voyages: any[] = []; // Store the voyages\n\n  constructor(private http: HttpClient) { }\n\n  // Method to fetch existing voyages from the database\n  getAllVoyages(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl).pipe(\n      tap((voyages) => {\n        this.voyages = voyages;\n        this.voyageUpdated.next([...this.voyages]);\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  createVoyage(voyageData: FormData): Observable<any> {\n    const token = localStorage.getItem('token');\n    console.log('Token used for request:', token); // Log token\n\n    const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.post(this.apiUrl, voyageData, { headers }).pipe(\n        catchError(this.handleError),\n        tap((newVoyage) => {\n        this.voyages.push(newVoyage);\n        this.voyageUpdated.next([...this.voyages]);\n      })\n    );\n  }\n\n  deleteVoyage(voyageId: number): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.delete(`${this.apiUrl}/${voyageId}`, { headers }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  getVoyageUpdateListener(): Observable<any[]> {\n    return this.voyageUpdated.asObservable();\n  }\n\n  // Error handling method\n  private handleError(error: HttpErrorResponse) {\n    console.error('Error occurred in VoyageService:', error); // Detailed error log\n    return throwError('Error in VoyageService');\n}\n\n  shareVoyage(voyageId: number, userEmail: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  \n    // The body of the request could include the ID of the voyage and the email to share with\n    const body = { voyageId, userEmail };\n  \n    // This assumes you have a backend endpoint at /api/voyages/share to handle sharing\n    return this.http.post(`${this.apiUrl}/share`, body, { headers }).pipe(\n      catchError(this.handleError)\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
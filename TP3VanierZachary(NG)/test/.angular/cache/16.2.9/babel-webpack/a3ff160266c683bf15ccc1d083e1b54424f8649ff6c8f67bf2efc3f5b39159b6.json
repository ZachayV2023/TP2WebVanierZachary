{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:5177/api/Auth'; // Update with your actual backend URL\n  }\n\n  register(username, email, password) {\n    return this.http.post(`${this.baseUrl}/register`, {\n      username,\n      email,\n      password\n    }).pipe(catchError(this.handleError));\n  }\n  login(username, password) {\n    return this.http.post(`${this.baseUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => this.setSession(response.token)), catchError(this.handleError));\n  }\n  logout() {\n    localStorage.removeItem('authToken');\n    // Also clear any other stored data related to the current user session here\n    // Redirect to login or home page if needed\n  }\n\n  setSession(authToken) {\n    localStorage.setItem('authToken', authToken);\n    // Here you can also set the token expiration time if your server provides that information\n  }\n\n  handleError(error) {\n    // Optionally transform error for user consumption\n    console.error('An error occurred:', error.error.message);\n    // Let the app keep running by returning an empty result or throwing an error\n    return throwError(error);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["throwError","catchError","tap","AuthService","constructor","http","baseUrl","register","username","email","password","post","pipe","handleError","login","response","setSession","token","logout","localStorage","removeItem","authToken","setItem","error","console","message","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2037408\\Desktop\\TP3WebVanierZachary\\TP3VanierZachary(NG)\\test\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:5177/api/Auth'; // Update with your actual backend URL\n\n  constructor(private http: HttpClient) { }\n\n  register(username: string, email: string, password: string): Observable<any> {\n    return this.http.post(`${this.baseUrl}/register`, { username, email, password }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post<{ token: string }>(`${this.baseUrl}/login`, { username, password }).pipe(\n      tap(response => this.setSession(response.token)),\n      catchError(this.handleError)\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('authToken');\n    // Also clear any other stored data related to the current user session here\n    // Redirect to login or home page if needed\n  }\n\n  private setSession(authToken: string): void {\n    localStorage.setItem('authToken', authToken);\n    // Here you can also set the token expiration time if your server provides that information\n  }\n\n  private handleError(error: any) {\n    // Optionally transform error for user consumption\n    console.error('An error occurred:', error.error.message);\n    // Let the app keep running by returning an empty result or throwing an error\n    return throwError(error);\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,gCAAgC,CAAC,CAAC;EAEZ;;EAExCC,QAAQA,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB;IACxD,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,WAAW,EAAE;MAAEE,QAAQ;MAAEC,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACnFX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEAC,KAAKA,CAACN,QAAgB,EAAEE,QAAgB;IACtC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAoB,GAAG,IAAI,CAACL,OAAO,QAAQ,EAAE;MAAEE,QAAQ;MAAEE;IAAQ,CAAE,CAAC,CAACE,IAAI,CAC5FV,GAAG,CAACa,QAAQ,IAAI,IAAI,CAACC,UAAU,CAACD,QAAQ,CAACE,KAAK,CAAC,CAAC,EAChDhB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEAK,MAAMA,CAAA;IACJC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;IACpC;IACA;EACF;;EAEQJ,UAAUA,CAACK,SAAiB;IAClCF,YAAY,CAACG,OAAO,CAAC,WAAW,EAAED,SAAS,CAAC;IAC5C;EACF;;EAEQR,WAAWA,CAACU,KAAU;IAC5B;IACAC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;IACxD;IACA,OAAOzB,UAAU,CAACuB,KAAK,CAAC;EAC1B;EAAC,QAAAG,CAAA,G;qBAlCUvB,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX5B,WAAW;IAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
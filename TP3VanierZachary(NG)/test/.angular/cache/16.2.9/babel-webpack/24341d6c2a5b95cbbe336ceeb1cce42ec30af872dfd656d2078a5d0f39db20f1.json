{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nisLoggedIn$ = new BehaviorSubject(this.hasToken());\nlogin(username, string, password, string, rememberMe, boolean = false);\nObservable < any > {\n  // Adjust the implementation to handle rememberMe\n};\n// Add this if you're using BehaviorSubject\nget;\nisLoggedIn$();\nObservable < boolean > {\n  return: this.isLoggedIn$.asObservable()\n};\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7011/api/Account';\n    this.loggedIn = new BehaviorSubject(this.hasToken());\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token'); // Simple check for the presence of a token\n  }\n\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/Login`, {\n      username,\n      password\n    }).pipe(tap(res => {\n      if (res && res.token) {\n        localStorage.setItem('token', res.token);\n        location.reload(); // Refresh the page after successful login\n      }\n    }));\n  }\n\n  register(registerData) {\n    return this.http.post(`${this.apiUrl}/Register`, registerData);\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.loggedIn.next(false);\n  }\n  hasToken() {\n    return !!localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","Observable","tap","isLoggedIn$","hasToken","login","username","string","password","rememberMe","boolean","any","get","return","asObservable","AuthService","constructor","http","apiUrl","loggedIn","isLoggedIn","localStorage","getItem","post","pipe","res","token","setItem","location","reload","register","registerData","logout","removeItem","next","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Zachary\\Desktop\\TP3WebVanierZachary\\TP3VanierZachary(NG)\\test\\src\\app\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n}\r\n\r\n// Add the isLoggedIn$ BehaviorSubject if you want an observable approach\r\nprivate isLoggedIn$ = new BehaviorSubject<boolean>(this.hasToken());\r\n\r\nlogin(username: string, password: string, rememberMe: boolean = false): Observable<any> {\r\n  // Adjust the implementation to handle rememberMe\r\n}\r\n\r\n// Add this if you're using BehaviorSubject\r\nget isLoggedIn$(): Observable<boolean> {\r\n  return this.isLoggedIn$.asObservable();\r\n}\r\n\r\n// Adjust the RegisterData interface\r\ninterface RegisterData {\r\n  UserName: string;\r\n  Email: string;\r\n  Password: string;\r\n  PasswordConfirm?: string; // Add this if needed\r\n}\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'https://localhost:7011/api/Account';\r\n  private loggedIn = new BehaviorSubject<boolean>(this.hasToken());\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('token'); // Simple check for the presence of a token\r\n  }\r\n\r\n  login(username: string, password: string): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/Login`, { username, password })\r\n      .pipe(\r\n        tap(res => {\r\n          if (res && res.token) {\r\n            localStorage.setItem('token', res.token);\r\n            location.reload(); // Refresh the page after successful login\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  register(registerData: RegisterData): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/Register`, registerData);\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    this.loggedIn.next(false);\r\n  }\r\n\r\n  private hasToken(): boolean {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,EAAEC,UAAU,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAO5BC,WAAW,GAAG,IAAIH,eAAe,CAAU,IAAI,CAACI,QAAQ,EAAE,CAAC;AAEnEC,KAAK,CAACC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,EAAED,MAAM,EAAEE,UAAU,EAAEC,OAAO,GAAG,KAAK,CAAC;AAAET,UAAU,GAACU,GAAG,GAAE;EACtF;AAAA,CACD;AAED;AACAC,GAAG;AAACT,WAAW,EAAE;AAAEF,UAAU,GAACS,OAAO,GAAE;EACrCG,MAAM,EAAC,IAAI,CAACV,WAAW,CAACW,YAAY;CACrC;AAYD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,oCAAoC;IAC7C,KAAAC,QAAQ,GAAG,IAAInB,eAAe,CAAU,IAAI,CAACI,QAAQ,EAAE,CAAC;EAExB;EAExCgB,UAAUA,CAAA;IACR,OAAO,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC1C;;EAEAjB,KAAKA,CAACC,QAAgB,EAAEE,QAAgB;IACtC,OAAO,IAAI,CAACS,IAAI,CAACM,IAAI,CAAgB,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAE;MAAEZ,QAAQ;MAAEE;IAAQ,CAAE,CAAC,CACjFgB,IAAI,CACHtB,GAAG,CAACuB,GAAG,IAAG;MACR,IAAIA,GAAG,IAAIA,GAAG,CAACC,KAAK,EAAE;QACpBL,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACC,KAAK,CAAC;QACxCE,QAAQ,CAACC,MAAM,EAAE,CAAC,CAAC;;IAEvB,CAAC,CAAC,CACH;EACL;;EAEAC,QAAQA,CAACC,YAA0B;IACjC,OAAO,IAAI,CAACd,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,WAAW,EAAEa,YAAY,CAAC;EACrE;EAEAC,MAAMA,CAAA;IACJX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACd,QAAQ,CAACe,IAAI,CAAC,KAAK,CAAC;EAC3B;EAEQ9B,QAAQA,CAAA;IACd,OAAO,CAAC,CAACiB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EAAC,QAAAa,CAAA,G;qBAjCUpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}